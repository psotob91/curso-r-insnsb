---
title: "<FONT color='#A7D5E8'>Comparación de grupos: Desenlaces numéricos</FONT>"
subtitle: "<FONT color='#E9AFA3' size='10'>R para Ciencia de Datos en Salud: <br> Análisis Descriptivo e Inferencia Estadística</FONT>"
author: "<FONT color='#FFFFFF' size='30'>Percy Soto-Becerra M.D., M.Sc(c)</FONT>"
institute: "<FONT color='#FFFFFF' size='5'>InkaStats Data Science Solutions | Medical Branch<br>@github/psotob91</FONT>"

format: 
  revealjs:
    self-contained: true
    theme: [simple, theme/theme.scss]
    footer: "Comparación de grupos: Desenlaces numéricos"
    slide-number: c/t
    logo: img/logo.png
    width: 1920
    height: 1080
    highlight-style: ayu-dark
    self-contained-math: true
    # chalkboard: true
from: markdown+emoji
execute:
  echo: true
---

```{r}
#| label: setup
#| include: false
library(fontawesome)
library(tidyverse)
library(quarto)
library(gt)
library(gtExtras)
library(gtsummary)
library(showtext)
library(haven)
library(rio)
library(summarytools)
library(skimr)
library(webshot2)
## Ver QUARTO RSTUDIO CONFERENCE: https://github.com/rstudio-conf-2022/get-started-quarto/blob/main/materials/02-authoring.qmd
## 
## blackboard theme: https://github.com/schochastics/quarto-blackboard-theme
## 
## https://github.com/schochastics/xaringan-themes
```

# Comparación de variables numéricas entre grupos

## VD numérica, VI categórica

-   Cuando tenemos una VD numérica y una VI categórica, queremos describir la distribución de la VD en los niveles (o grupos) de la VI categórica.

    -   Podemos graficar las distrbuciones de VD numérica en cada grupo de la VI.

    -   O podemos resumir la distribución de la VD numérica en cada grupo de la VI.

```{r}
#| echo: false
#| fig-align: center
#| out-width: 100%
knitr::include_graphics("img/compar_grupos.png")
```

## Los datos que usaremos

:::: {.columns}

::: {.column width="50%"}
> [Estudio 1:]{.hl} Datos de estudio que buscó describir si los niveles de IgG post booster (final) en personas que recibieron tres dosis de vacunas contra el COVID-19

```{r}
#| echo: false
bd_inmuno <- read_stata("boost_inmuno.dta") %>% 
  as_factor()
```

-   Vistazo a los datos:

```{r}
bd_inmuno %>% 
  glimpse()
```

:::


::: {.column width="50%"}
> [Estudio 2:]{.hl} Datos de estudio que buscó evaluar si un suplemento de maca (en diferentes dosis) tenía un efecto en desenlaces relacionados a menopausia en un modelo murino.

```{r}
#| echo: false
bd_maca <- import("maca_meno_perclin.csv") 
```

-   Veamos los datos

```{r}
bd_maca %>% 
  glimpse()
```

:::
::::

## group_by() 

\

> La función [group_by()]{.plo} de [{dplyr}]{.plo} se combina con [summarise()]{.plo} para permitir generar estadísticos según grupos.

-   La función [group_by()]{.plo}:

```r
datos %>% 
  group_by(catvar) %>% 
  summarise(estadistico = estadistico(numvar))
```

## group_by() paso a paso {auto-animate="true"}

\ 

:::: {.columns}

::: {.column width='60%'}

```{r}
bd_inmuno %>% 
  summarise(Media_IgG_Final = mean(IgG_Final, na.rm = TRUE))
```

:::

::: {.column width='40%'}

Si solo usamos [summarise()]{.plo} para hallar la media de IgG Final, obtendremos la media de IgG Final de todos los datos.

:::

::::

## group_by() paso a paso {auto-animate="true"}

\

:::: {.columns}

::: {.column width='60%'}
```{r}
bd_inmuno %>% 
  group_by(sexo)
```
:::

::: {.column width='40%'}
En cambio, si usamos [group_by()]{.plo}, el tibble primero se agrupa en función de los valores de la variable dentro de group_by().

-   Notar que en el ejemplo, el tibble está agrupado según sexo.

-   Todos los cálculos que se realicen con [summarise()]{.plo}, o incluso con [mutate()]{.plo}, se realizan en los grupos de la variable dentro de group_by().
:::

::::

## group_by() paso a paso {auto-animate="true"}

\

:::: {.columns}
::: {.column width='60%'}
```{r}
bd_inmuno %>% 
  group_by(sexo) %>% 
  summarise(Media = mean(IgG_Final, na.rm = TRUE))
```
:::

::: {.column width='40%'}
Por tanto, si usamos [group_by()]{.plo} en combinación con [summarise()]{.plo} para hallar estadísticos de resumen de IgG Final para cada sexo.

-   En el ejemplo vemos que podemos calcular las medias en cada grupo de sexo.
:::

::::

## Medidas de resumen {.scrollable}

::: panel-tabset
### R base

> Hay varias formas de comparar grupos con R base. Sin embargo, la sintaxis es muy dispersa, poco armonizada, y puede tornarse compleja. Por lo tanto, no las abordaremos porque su sintaxis realmente es bastante inconsistente y este curso se centra en funciones de R tidy o funciones de R base que realmente sean absolutamente necesarias.

-   Algunas opciones a listar por cultura general:

    -   Función [by()]{.plo} combinada con funciones de resumen tales como [mean()]{.plo}, [sd()]{.plo}, etc.

    -   Funciones de la familia [apply()]{.plo} combinadas con funciones de resumen.

    -   Otros paquetes de R base que tienen funciones para esto.

### {dplyr}

> Se usa [summarise()]{.plo} en combinación con [group_by()]{.plo}.

::: columns
::: {.column width="50%"}
-   Promedio, DE y Mediana de IgG Final según sexo con datos perdidos:

```{r}
bd_inmuno %>% 
  group_by(sexo) %>% 
  summarise(
    Media = mean(IgG_Final, na.rm = TRUE), 
    DE = sd(IgG_Final, na.rm = TRUE), 
    Mediana = median(IgG_Final, na.rm = TRUE), 
  )
```
:::

::: {.column width="50%"}
-   Promedio, DE y Mediana de IgG Final según sexo sin datos perdidos:

```{r}
bd_inmuno %>% 
  group_by(sexo) %>% 
  summarise(
    Media = mean(IgG_Final, na.rm = TRUE), 
    DE = sd(IgG_Final, na.rm = TRUE), 
    Mediana = median(IgG_Final, na.rm = TRUE), 
  ) %>% 
  filter(!is.na(sexo))
```
:::
:::

### {dplyr}, parte 2

> También podemos usar [group_by()]{.plo} para agrupar por más de una variable categórica.

::: columns
::: {.column width="50%"}
-   Promedio, DE y Mediana de IgG Final según [sexo]{.hl} y [comorbilidades]{.hl} con datos perdidos:

```{r}
bd_inmuno %>% 
  group_by(sexo, comorb) %>% 
  summarise(
    Media = mean(IgG_Final, na.rm = TRUE), 
    DE = sd(IgG_Final, na.rm = TRUE), 
    Mediana = median(IgG_Final, na.rm = TRUE), 
  )
```
:::

::: {.column width="50%"}
-   Promedio, DE y Mediana de IgG Final según [sexo]{.hl} y [comorbilidades]{.hl} sin datos perdidos:

```{r}
bd_inmuno %>% 
  group_by(sexo, comorb) %>% 
  summarise(
    Media = mean(IgG_Final, na.rm = TRUE), 
    DE = sd(IgG_Final, na.rm = TRUE), 
    Mediana = median(IgG_Final, na.rm = TRUE), 
  ) %>% 
  filter(!is.na(sexo))
```
:::
:::

### {summarytools}

-   El paquete [{summarytools}]{.plo} tiene la funció [stby()]{.plo} que permite generarar estadísticos descriptivos según otra covariable.

-   En el caso de variables numéricas, podemos hacer que la función [descr()]{.plo} se aplique a cada grupo conformado por el valor de otra variable categórica.

```{r}
stby(data = bd_inmuno, 
     INDICES = bd_inmuno$sexo, 
     FUN = descr)
```

### {skim}

> Se puede usar [group_by()]{.plo} con [skim()]{.plo} para generar estadisticos de resumen por grupos.

```{r}
bd_inmuno %>% 
  select(edad, tdosis_refuerzo, IgG_Basal, IgG_Final, sexo) %>% 
  group_by(sexo) %>% 
  skim()
```

### Más info

- Oficial de {dplyr}: <https://dplyr.tidyverse.org/reference/group_by.html>

- Tutorial en español: <https://rsanchezs.gitbooks.io/rprogramming/content/chapter9/groupby.html>

:::

## {gtsummary}: tbl_summary y argumento by = 

<br/>

> Se puede usar la función [tbl_summary()]{.plo} para comparar variables numéricas según grupos.

<br/>

::: columns
::: {.column width="50%"}
``` r
bd_inmuno %>% 
  select(edad, tdosis_refuerzo, IgG_Basal, IgG_Final, sexo)
```

-   Primero seleccionamos las variables numéricas y la variable de agrupación sexo.
:::

::: {.column width="50%"}
```{r}
#| echo: false
#| message: false
#| warning: false
#| error: false

bd_inmuno %>% 
  select(edad, tdosis_refuerzo, IgG_Basal, IgG_Final, sexo) 
```
:::
:::

## {gtsummary}: tbl_summary y argumento by = {auto-animate=true}

<br/>

::: columns
::: {.column width="50%"}
``` r
bd_inmuno %>% 
  select(edad, tdosis_refuerzo, IgG_Basal, IgG_Final, sexo) %>% 
  tbl_summary()
```

-   Primero seleccionamos las variables numéricas y la variable de agrupación sexo.

-   Si hacemos [tbl_summary()]{.plo}, se generará una tabla descriptiva para toda la muestra.
:::

::: {.column width="50%"}
```{r}
#| echo: false
#| message: false
#| warning: false
#| error: false
#| fig-align: center
#| out-width: 50%
bd_inmuno %>% 
  select(edad, tdosis_refuerzo, IgG_Basal, IgG_Final, sexo) %>% 
  tbl_summary() %>%  
  as_gt() %>% 
  gtsave("tab1.png", "img/")

knitr::include_graphics("img/tab1.png")
```
:::
:::

## {gtsummary}: tbl_summary y argumento by = {auto-animate=true}

<br/>

::: columns
::: {.column width="50%"}
``` r
bd_inmuno %>% 
  select(edad, tdosis_refuerzo, IgG_Basal, IgG_Final, sexo) %>% 
  tbl_summary(by = sexo)
```

-   Primero seleccionamos las variables numéricas y la variable de agrupación sexo.

-   Si hacemos [tbl_summary()]{.plo}, se generará una tabla descriptiva para toda la muestra.

-   El argumento [by()]{.plo} genera una tabla descriptiva con las medidas de resumen por cada grupo.
:::

::: {.column width="50%"}
```{r}
#| echo: false
#| message: false
#| warning: false
#| error: false
#| fig-align: center
#| out-width: 100%
bd_inmuno %>% 
  select(edad, tdosis_refuerzo, IgG_Basal, IgG_Final, sexo) %>% 
  tbl_summary(by = sexo) %>%  
  as_gt() %>% 
  gtsave("tab2.png", "img/")

knitr::include_graphics("img/tab2.png")
```
:::
:::

## Personalizar tbl_summary() paso a paso 

<br/>

::: columns
::: {.column width="50%"}
``` r
bd_inmuno %>% 
  select(edad, tdosis_refuerzo, IgG_Basal, IgG_Final, sexo) %>% 
  tbl_summary(by = sexo) 
```
:::

::: {.column width="50%"}
```{r}
#| echo: false
#| message: false
#| warning: false
#| error: false
#| fig-align: center
#| out-width: 100%
bd_inmuno %>% 
  select(edad, tdosis_refuerzo, IgG_Basal, IgG_Final, sexo) %>% 
  tbl_summary(by = sexo) %>%  
  as_gt() %>% 
  gtsave("tab3.png", "img/")

knitr::include_graphics("img/tab3.png")
```
:::
:::

## Personalizar tbl_summary() paso a paso {auto-animate=true}

<br/>

::: columns
::: {.column width="50%"}
``` r
bd_inmuno %>% 
  select(edad, tdosis_refuerzo, IgG_Basal, IgG_Final, sexo) %>% 
  tbl_summary(by = sexo, 
              type = list(edad ~ "continuous2")) 
```

-   [type:]{.hl} Especifica el tipo de variable para resumen.

    -   Queremos reportar varios estadísticos para edad
:::

::: {.column width="50%"}
```{r}
#| echo: false
#| message: false
#| warning: false
#| error: false
#| fig-align: center
#| out-width: 100%
bd_inmuno %>% 
  select(edad, tdosis_refuerzo, IgG_Basal, IgG_Final, sexo) %>% 
  tbl_summary(by = sexo, 
              type = list(edad ~ "continuous2")) %>%  
  as_gt() %>% 
  gtsave("tab4.png", "img/")

knitr::include_graphics("img/tab4.png")
```
:::
:::

## Personalizar tbl_summary() paso a paso {auto-animate=true}

<br/>

::: columns
::: {.column width="50%"}
``` r
bd_inmuno %>% 
  select(edad, tdosis_refuerzo, IgG_Basal, IgG_Final, sexo) %>% 
  tbl_summary(by = sexo, 
              type = list(edad ~ "continuous2"), 
              statistic = list(
                edad ~ c("{mean} ± {sd}", "{median} ({p25}, {p75})")
              )) 
```

-   [type:]{.hl} Especifica el tipo de variable para resumen.

    -   Queremos reportar varios estadísticos para edad

-   [statistic:]{.hl} Personaliza los estadísticos reportados.

    -   Indicamos qué estadísticos queremos reportar para edad.
:::

::: {.column width="50%"}
```{r}
#| echo: false
#| message: false
#| warning: false
#| error: false
#| fig-align: center
#| out-width: 100%
bd_inmuno %>% 
  select(edad, tdosis_refuerzo, IgG_Basal, IgG_Final, sexo) %>% 
  tbl_summary(by = sexo, 
              type = list(edad ~ "continuous2"), 
              statistic = list(
                edad ~ c("{mean} ± {sd}", "{median} ({p25}, {p75})")
              )) %>%  
  as_gt() %>% 
  gtsave("tab5.png", "img/")

knitr::include_graphics("img/tab5.png")
```
:::
:::

## Personalizar tbl_summary() paso a paso {auto-animate=true}

<br/>

::: columns
::: {.column width="50%"}
``` r
bd_inmuno %>% 
  select(edad, tdosis_refuerzo, IgG_Basal, IgG_Final, sexo) %>% 
  tbl_summary(by = sexo, 
              type = list(edad ~ "continuous2"), 
              statistic = list(
                edad ~ c("{mean} ± {sd}", "{median} ({p25}, {p75})"), 
                IgG_Basal ~ "{mean} ± {sd}"
              )) 
```

-   [type:]{.hl} Especifica el tipo de variable para resumen.

    -   Queremos reportar varios estadísticos para edad

-   [statistic:]{.hl} Personaliza los estadísticos reportados.

    -   Indicamos qué estadísticos queremos reportar para edad.

    -   Queremos reportar media y DE para IgG Basal.
:::

::: {.column width="50%"}
```{r}
#| echo: false
#| message: false
#| warning: false
#| error: false
#| fig-align: center
#| out-width: 100%
bd_inmuno %>% 
  select(edad, tdosis_refuerzo, IgG_Basal, IgG_Final, sexo) %>% 
  tbl_summary(by = sexo, 
              type = list(edad ~ "continuous2"), 
              statistic = list(
                edad ~ c("{mean} ± {sd}", "{median} ({p25}, {p75})"), 
                IgG_Basal ~ "{mean} ± {sd}"
              )) %>%  
  as_gt() %>% 
  gtsave("tab6.png", "img/")

knitr::include_graphics("img/tab6.png")
```
:::
:::

## Personalizar tbl_summary() paso a paso {auto-animate=true}

<br/>

::: columns
::: {.column width="50%"}
``` r
bd_inmuno %>% 
  select(edad, tdosis_refuerzo, IgG_Basal, IgG_Final, sexo) %>% 
  tbl_summary(by = sexo, 
              type = list(edad ~ "continuous2"), 
              statistic = list(
                edad ~ c("{mean} ± {sd}", "{median} ({p25}, {p75})"), 
                IgG_Basal ~ "{mean} ± {sd}"
              ), 
              label = list(
                edad ~ "Age, years", 
                tdosis_refuerzo ~ "Time between second and third dose", 
                IgG_Basal ~ "IgG pre booster", 
                IgG_Final ~ "IgG post booster"
              ))
```

-   [type:]{.hl} Especifica el tipo de variable para resumen.

    -   Queremos reportar varios estadísticos para edad

-   [statistic:]{.hl} Personaliza los estadísticos reportados.

    -   Indicamos qué estadísticos queremos reportar para edad.

    -   Queremos reportar media y DE para IgG Basal.

-   [label]{.hl} Personaliza las etiquetas de variable.
:::

::: {.column width="50%"}
```{r}
#| echo: false
#| message: false
#| warning: false
#| error: false
#| fig-align: center
#| out-width: 100%
bd_inmuno %>% 
  select(edad, tdosis_refuerzo, IgG_Basal, IgG_Final, sexo) %>% 
  tbl_summary(by = sexo, 
              type = list(edad ~ "continuous2"), 
              statistic = list(
                edad ~ c("{mean} ± {sd}", "{median} ({p25}, {p75})"), 
                IgG_Basal ~ "{mean} ± {sd}"
              ), 
              label = list(
                edad ~ "Age, years", 
                tdosis_refuerzo ~ "Time between second and third dose", 
                IgG_Basal ~ "IgG pre booster", 
                IgG_Final ~ "IgG post booster"
              )) %>%  
  as_gt() %>% 
  gtsave("tab7.png", "img/")

knitr::include_graphics("img/tab7.png")
```
:::
:::

## Personalizar tbl_summary() paso a paso {auto-animate=true}

<br/>

::: columns
::: {.column width="50%"}
``` r
bd_inmuno %>% 
  select(edad, tdosis_refuerzo, IgG_Basal, IgG_Final, sexo) %>% 
  tbl_summary(by = sexo, 
              type = list(edad ~ "continuous2"), 
              statistic = list(
                edad ~ c("{mean} ± {sd}", "{median} ({p25}, {p75})"), 
                IgG_Basal ~ "{mean} ± {sd}"
              ), 
              label = list(
                edad ~ "Age, years", 
                tdosis_refuerzo ~ "Time between second and third dose", 
                IgG_Basal ~ "IgG pre booster", 
                IgG_Final ~ "IgG post booster"
              ), 
              digits = list(
                c(IgG_Final, IgG_Basal) ~ 2
              ))
```

-   [type:]{.hl} Especifica el tipo de variable para resumen.

-   [statistic:]{.hl} Personaliza los estadísticos reportados.

-   [label]{.hl} Personaliza las etiquetas de variable.
:::

::: {.column width="50%"}
```{r}
#| echo: false
#| message: false
#| warning: false
#| error: false
#| fig-align: center
#| out-width: 100%
bd_inmuno %>% 
  select(edad, tdosis_refuerzo, IgG_Basal, IgG_Final, sexo) %>% 
  tbl_summary(by = sexo, 
              type = list(edad ~ "continuous2"), 
              statistic = list(
                edad ~ c("{mean} ± {sd}", "{median} ({p25}, {p75})"), 
                IgG_Basal ~ "{mean} ± {sd}"
              ), 
              label = list(
                edad ~ "Age, years", 
                tdosis_refuerzo ~ "Time between second and third dose", 
                IgG_Basal ~ "IgG pre booster", 
                IgG_Final ~ "IgG post booster"
              ), 
              digits = list(
                c(IgG_Final, IgG_Basal) ~ 2
              )) %>%  
  as_gt() %>% 
  gtsave("tab8.png", "img/")

knitr::include_graphics("img/tab8.png")
```

-   [digits:]{.hl} Controla el número de decimales de redondeo.

    -   Permitir que IgG (basal y final) se reporten con solo 2 decimales.
:::
:::

## Personalizar tbl_summary() paso a paso {auto-animate=true}

<br/>

::: columns
::: {.column width="50%"}
``` r
bd_inmuno %>% 
  select(edad, tdosis_refuerzo, IgG_Basal, IgG_Final, sexo) %>% 
  tbl_summary(by = sexo, 
              type = list(edad ~ "continuous2"), 
              statistic = list(
                edad ~ c("{mean} ± {sd}", "{median} ({p25}, {p75})"), 
                IgG_Basal ~ "{mean} ± {sd}"
              ), 
              label = list(
                edad ~ "Age, years", 
                tdosis_refuerzo ~ "Time between second and third dose", 
                IgG_Basal ~ "IgG pre booster", 
                IgG_Final ~ "IgG post booster"
              ), 
              digits = list(
                c(IgG_Final, IgG_Basal) ~ 2, 
                edad ~ c(1, 2, 1, 2)
              )) 
```

-   [type:]{.hl} Especifica el tipo de variable para resumen.

-   [statistic:]{.hl} Personaliza los estadísticos reportados.

-   [label]{.hl} Personaliza las etiquetas de variable.
:::

::: {.column width="50%"}
```{r}
#| echo: false
#| message: false
#| warning: false
#| error: false
#| fig-align: center
#| out-width: 100%
bd_inmuno %>% 
  select(edad, tdosis_refuerzo, IgG_Basal, IgG_Final, sexo) %>% 
  tbl_summary(by = sexo, 
              type = list(edad ~ "continuous2"), 
              statistic = list(
                edad ~ c("{mean} ± {sd}", "{median} ({p25}, {p75})"), 
                IgG_Basal ~ "{mean} ± {sd}"
              ), 
              label = list(
                edad ~ "Age, years", 
                tdosis_refuerzo ~ "Time between second and third dose", 
                IgG_Basal ~ "IgG pre booster", 
                IgG_Final ~ "IgG post booster"
              ), 
              digits = list(
                c(IgG_Final, IgG_Basal) ~ 2, 
                edad ~ c(1, 2, 1, 2)
              )) %>%  
  as_gt() %>% 
  gtsave("tab9.png", "img/")

knitr::include_graphics("img/tab9.png")
```

-   [digits:]{.hl} Controla el número de decimales de redondeo.

    -   Edad que se reporte con 1 decimal la media y media y 2 decimales la SD y el IQR.
:::
:::

## Más personalización de tbl_summary() con add_()

<br/>

::: columns
::: {.column width="50%"}
``` r
bd_inmuno %>% 
  select(edad, tdosis_refuerzo, IgG_Basal, IgG_Final, sexo) %>% 
  tbl_summary(by = sexo, 
              type = list(edad ~ "continuous2"), 
              label = list(
                edad ~ "Age, years", 
                tdosis_refuerzo ~ "Time between second and third dose", 
                IgG_Basal ~ "IgG pre booster", 
                IgG_Final ~ "IgG post booster"
              ))
```

:::

::: {.column width="50%"}
```{r}
#| echo: false
#| message: false
#| warning: false
#| error: false
#| fig-align: center
#| out-width: 100%
bd_inmuno %>% 
  select(edad, tdosis_refuerzo, IgG_Basal, IgG_Final, sexo) %>% 
  tbl_summary(by = sexo, 
              type = list(edad ~ "continuous2"), 
              label = list(
                edad ~ "Age, years", 
                tdosis_refuerzo ~ "Time between second and third dose", 
                IgG_Basal ~ "IgG pre booster", 
                IgG_Final ~ "IgG post booster"
              )) %>% 
  as_gt() %>%
  gtsave("tab10.png", "img/")

knitr::include_graphics("img/tab10.png")
```

:::
:::

## Más personalización de tbl_summary() con add_() {auto-animate=true}

<br/>

::: columns
::: {.column width="50%"}
``` r
bd_inmuno %>% 
  select(edad, tdosis_refuerzo, IgG_Basal, IgG_Final, sexo) %>% 
  tbl_summary(by = sexo, 
              type = list(edad ~ "continuous2"), 
              label = list(
                edad ~ "Age, years", 
                tdosis_refuerzo ~ "Time between second and third dose", 
                IgG_Basal ~ "IgG pre booster", 
                IgG_Final ~ "IgG post booster"
              )) %>% 
  add_overall()
```

-   [add_overall:]{.hl} Agrega una columna con el resumen de características para toda la población de estudio.

:::

::: {.column width="50%"}
```{r}
#| echo: false
#| message: false
#| warning: false
#| error: false
#| fig-align: center
#| out-width: 100%
bd_inmuno %>% 
  select(edad, tdosis_refuerzo, IgG_Basal, IgG_Final, sexo) %>% 
  tbl_summary(by = sexo, 
              type = list(edad ~ "continuous2"), 
              label = list(
                edad ~ "Age, years", 
                tdosis_refuerzo ~ "Time between second and third dose", 
                IgG_Basal ~ "IgG pre booster", 
                IgG_Final ~ "IgG post booster"
              )) %>% 
  add_overall() %>% 
  as_gt() %>%
  gtsave("tab11.png", "img/")

knitr::include_graphics("img/tab11.png")
```

:::
:::

## Más personalización de tbl_summary() con add_() {auto-animate=true}

<br/>

::: columns
::: {.column width="50%"}
``` r
bd_inmuno %>% 
  select(edad, tdosis_refuerzo, IgG_Basal, IgG_Final, sexo) %>% 
  tbl_summary(by = sexo, 
              type = list(edad ~ "continuous2"), 
              label = list(
                edad ~ "Age, years", 
                tdosis_refuerzo ~ "Time between second and third dose", 
                IgG_Basal ~ "IgG pre booster", 
                IgG_Final ~ "IgG post booster"
              )) %>% 
  add_overall() %>% 
  add_n()
```

-   [add_overall:]{.hl} Agrega una columna con el resumen de características para toda la población de estudio.

- [add_n():]{.hl} Agrega una columna con el tamaño de muestra efectivo (excluyendo los datos perdidos)

:::

::: {.column width="50%"}
```{r}
#| echo: false
#| message: false
#| warning: false
#| error: false
#| fig-align: center
#| out-width: 100%
bd_inmuno %>% 
  select(edad, tdosis_refuerzo, IgG_Basal, IgG_Final, sexo) %>% 
  tbl_summary(by = sexo, 
              type = list(edad ~ "continuous2"), 
              label = list(
                edad ~ "Age, years", 
                tdosis_refuerzo ~ "Time between second and third dose", 
                IgG_Basal ~ "IgG pre booster", 
                IgG_Final ~ "IgG post booster"
              )) %>% 
  add_overall() %>% 
  add_n() %>% 
  as_gt() %>%
  gtsave("tab12.png", "img/")

knitr::include_graphics("img/tab12.png")
```

:::
:::

## Más personalización de tbl_summary() con modify_() 

- Podemos modificar el nombre de las cabeceras, pero primero hay que saber cómo están guardadas.

- Creamos la tabla cruda y la guardamos con un nombre:

:::: {.columns}

::: {.column width='50%'}

```r
bd_inmuno %>% 
  select(edad, tdosis_refuerzo, IgG_Basal, IgG_Final, sexo) %>% 
  tbl_summary(by = sexo, 
              type = list(edad ~ "continuous2"), 
              label = list(
                edad ~ "Age, years", 
                tdosis_refuerzo ~ "Time between second and third dose", 
                IgG_Basal ~ "IgG pre booster", 
                IgG_Final ~ "IgG post booster"
              )) -> tabla

tabla
```

```{r}
#| echo: false
bd_inmuno %>% 
  select(edad, tdosis_refuerzo, IgG_Basal, IgG_Final, sexo) %>% 
  tbl_summary(by = sexo, 
              type = list(edad ~ "continuous2"), 
              label = list(
                edad ~ "Age, years", 
                tdosis_refuerzo ~ "Time between second and third dose", 
                IgG_Basal ~ "IgG pre booster", 
                IgG_Final ~ "IgG post booster"
              )) -> tabla
```

:::

::: {.column width='50%'}
```{r}
#| echo: false
#| message: false
#| warning: false
#| error: false
#| fig-align: center
#| out-width: 100%
bd_inmuno %>% 
  select(edad, tdosis_refuerzo, IgG_Basal, IgG_Final, sexo) %>% 
  tbl_summary(by = sexo, 
              type = list(edad ~ "continuous2"), 
              label = list(
                edad ~ "Age, years", 
                tdosis_refuerzo ~ "Time between second and third dose", 
                IgG_Basal ~ "IgG pre booster", 
                IgG_Final ~ "IgG post booster"
              )) -> tabla

tabla %>%   
  as_gt() %>%
  gtsave("tab13.png", "img/")

knitr::include_graphics("img/tab13.png")
```

:::

::::

## Más personalización de tbl_summary() con modify_() {auto-animate=true}

- Podemos modificar el nombre de las cabeceras, pero primero hay que saber cómo están guardadas.

- Creamos la tabla cruda y la guardamos con un nombre:

:::: {.columns}

::: {.column width='50%'}

```r
bd_inmuno %>% 
  select(edad, tdosis_refuerzo, IgG_Basal, IgG_Final, sexo) %>% 
  tbl_summary(by = sexo, 
              type = list(edad ~ "continuous2"), 
              label = list(
                edad ~ "Age, years", 
                tdosis_refuerzo ~ "Time between second and third dose", 
                IgG_Basal ~ "IgG pre booster", 
                IgG_Final ~ "IgG post booster"
              )) -> tabla

tabla
```

```{r}
#| echo: false
bd_inmuno %>% 
  select(edad, tdosis_refuerzo, IgG_Basal, IgG_Final, sexo) %>% 
  tbl_summary(by = sexo, 
              type = list(edad ~ "continuous2"), 
              label = list(
                edad ~ "Age, years", 
                tdosis_refuerzo ~ "Time between second and third dose", 
                IgG_Basal ~ "IgG pre booster", 
                IgG_Final ~ "IgG post booster"
              )) -> tabla
```


- Luego, consultamos los nombres de cabeceras internos que tiene el objeto tbl_summary:

```{r}
show_header_names(tabla)
```

:::

::: {.column width='50%'}
```{r}
#| echo: false
#| message: false
#| warning: false
#| error: false
#| fig-align: center
#| out-width: 100%
bd_inmuno %>% 
  select(edad, tdosis_refuerzo, IgG_Basal, IgG_Final, sexo) %>% 
  tbl_summary(by = sexo, 
              type = list(edad ~ "continuous2"), 
              label = list(
                edad ~ "Age, years", 
                tdosis_refuerzo ~ "Time between second and third dose", 
                IgG_Basal ~ "IgG pre booster", 
                IgG_Final ~ "IgG post booster"
              )) -> tabla

tabla %>%   
  as_gt() %>%
  gtsave("tab14.png", "img/")

knitr::include_graphics("img/tab14.png")
```

- Podemos editar los nombres de las cabeceras llamándolos como [label]{.hl}, [stat_1]{.hl} y [stat_2]{.hl}.

:::

::::

## Más personalización de tbl_summary() con modify_() 

:::: {.columns}

::: {.column width='50%'}

```r
bd_inmuno %>% 
  select(edad, tdosis_refuerzo, IgG_Basal, IgG_Final, sexo) %>% 
  tbl_summary(by = sexo, 
              type = list(edad ~ "continuous2"), 
              label = list(
                edad ~ "Age, years", 
                tdosis_refuerzo ~ "Time between second and third dose", 
                IgG_Basal ~ "IgG pre booster", 
                IgG_Final ~ "IgG post booster"
              )) 
```
- [modify_header()]{.hl}: Edita los nombres de las cabeceras.

:::

::: {.column width='50%'}
```{r}
#| echo: false
#| message: false
#| warning: false
#| error: false
#| fig-align: center
#| out-width: 100%
bd_inmuno %>% 
  select(edad, tdosis_refuerzo, IgG_Basal, IgG_Final, sexo) %>% 
  tbl_summary(by = sexo, 
              type = list(edad ~ "continuous2"), 
              label = list(
                edad ~ "Age, years", 
                tdosis_refuerzo ~ "Time between second and third dose", 
                IgG_Basal ~ "IgG pre booster", 
                IgG_Final ~ "IgG post booster"
              )) %>% 
  as_gt() %>%
  gtsave("tab15.png", "img/")

knitr::include_graphics("img/tab15.png")
```


:::

::::

## Más personalización de tbl_summary() con modify_() {auto-animate=true}

:::: {.columns}

::: {.column width='50%'}

```r
bd_inmuno %>% 
  select(edad, tdosis_refuerzo, IgG_Basal, IgG_Final, sexo) %>% 
  tbl_summary(by = sexo, 
              type = list(edad ~ "continuous2"), 
              label = list(
                edad ~ "Age, years", 
                tdosis_refuerzo ~ "Time between second and third dose", 
                IgG_Basal ~ "IgG pre booster", 
                IgG_Final ~ "IgG post booster"
              )) %>% 
  modify_header(
    label ~ "Variables", 
    stat_1 ~ "Female", 
    stat_2 ~ "Male"
  )
```
- [modify_header()]{.hl}: Edita los nombres de las cabeceras.

:::

::: {.column width='50%'}
```{r}
#| echo: false
#| message: false
#| warning: false
#| error: false
#| fig-align: center
#| out-width: 100%
bd_inmuno %>% 
  select(edad, tdosis_refuerzo, IgG_Basal, IgG_Final, sexo) %>% 
  tbl_summary(by = sexo, 
              type = list(edad ~ "continuous2"), 
              label = list(
                edad ~ "Age, years", 
                tdosis_refuerzo ~ "Time between second and third dose", 
                IgG_Basal ~ "IgG pre booster", 
                IgG_Final ~ "IgG post booster"
              )) %>% 
  modify_header(
    label ~ "Variables", 
    stat_1 ~ "Female", 
    stat_2 ~ "Male"
  ) %>%   
  as_gt() %>%
  gtsave("tab16.png", "img/")

knitr::include_graphics("img/tab16.png")
```


:::

::::

## Más personalización de tbl_summary() con modify_() {auto-animate=true}

:::: {.columns}

::: {.column width='50%'}

```r
bd_inmuno %>% 
  select(edad, tdosis_refuerzo, IgG_Basal, IgG_Final, sexo) %>% 
  tbl_summary(by = sexo, 
              type = list(edad ~ "continuous2"), 
              label = list(
                edad ~ "Age, years", 
                tdosis_refuerzo ~ "Time between second and third dose", 
                IgG_Basal ~ "IgG pre booster", 
                IgG_Final ~ "IgG post booster"
              )) %>% 
  modify_header(
    label ~ "Variables", 
    stat_1 ~ "Female", 
    stat_2 ~ "Male"
  )
```
- [modify_header()]{.hl}: Edita los nombres de las cabeceras.

    + Podemos editar el contenido de estas con {}
    
        + Por ejemplo, poner "n = {n}"

:::

::: {.column width='50%'}
```{r}
#| echo: false
#| message: false
#| warning: false
#| error: false
#| fig-align: center
#| out-width: 100%
bd_inmuno %>% 
  select(edad, tdosis_refuerzo, IgG_Basal, IgG_Final, sexo) %>% 
  tbl_summary(by = sexo, 
              type = list(edad ~ "continuous2"), 
              label = list(
                edad ~ "Age, years", 
                tdosis_refuerzo ~ "Time between second and third dose", 
                IgG_Basal ~ "IgG pre booster", 
                IgG_Final ~ "IgG post booster"
              )) %>% 
  modify_header(
    label ~ "Variables", 
    stat_1 ~ "Female (n = {n})", 
    stat_2 ~ "Male (n = {n})"
  )  %>%  
  as_gt() %>%
  gtsave("tab17.png", "img/")

knitr::include_graphics("img/tab17.png")
```

:::

::::

## Más personalización de tbl_summary() con modify_() {auto-animate=true}

:::: {.columns}

::: {.column width='50%'}

```r
bd_inmuno %>% 
  select(edad, tdosis_refuerzo, IgG_Basal, IgG_Final, sexo) %>% 
  tbl_summary(by = sexo, 
              type = list(edad ~ "continuous2"), 
              label = list(
                edad ~ "Age, years", 
                tdosis_refuerzo ~ "Time between second and third dose", 
                IgG_Basal ~ "IgG pre booster", 
                IgG_Final ~ "IgG post booster"
              )) %>% 
  modify_header(
    label ~ "Variables", 
    stat_1 ~ "Female (n = {n})", 
    stat_2 ~ "Male (n = {n})"
  )  
```
- [modify_header()]{.hl}: Edita los nombres de las cabeceras.

    + Podemos editar el contenido de estas con {}
    
        + Por ejemplo, poner "n = {n}"

:::

::: {.column width='50%'}
```{r}
#| echo: false
#| message: false
#| warning: false
#| error: false
#| fig-align: center
#| out-width: 100%
bd_inmuno %>% 
  select(edad, tdosis_refuerzo, IgG_Basal, IgG_Final, sexo) %>% 
  tbl_summary(by = sexo, 
              type = list(edad ~ "continuous2"), 
              label = list(
                edad ~ "Age, years", 
                tdosis_refuerzo ~ "Time between second and third dose", 
                IgG_Basal ~ "IgG pre booster", 
                IgG_Final ~ "IgG post booster"
              )) %>% 
  modify_header(
    label ~ "Variables", 
    stat_1 ~ "Female (n = {n})", 
    stat_2 ~ "Male (n = {n})"
  )  %>%  
  as_gt() %>%
  gtsave("tab18.png", "img/")

knitr::include_graphics("img/tab18.png")
```


:::

::::

# Gráficos


## Gráfico de cajas {auto-animate="true"}

```{r}
#| output-location: column
#| out-width: 100%
bd_maca %>% 
  ggplot(aes(x = tratamiento, y = peso_final)) + 
  geom_boxplot()
```

- Gráfico de cajas básico se obtiene usando la geometría `geom_boxplot()`.

## Gráfico de cajas {auto-animate="true"}

```{r}
#| output-location: column
#| out-width: 100%
bd_maca %>% 
  ggplot(aes(x = tratamiento, y = peso_final, color = tratamiento)) + 
  geom_boxplot()
```

- Gráfico de cajas básico se obtiene usando la geometría `geom_boxplot()`.

- Mapping: 

    - `color` dentro de aes() mapea el color de la línea de la caja con otra variable. 

## Gráfico de cajas {auto-animate="true"}

```{r}
#| output-location: column
#| out-width: 100%
bd_maca %>% 
  ggplot(aes(x = tratamiento, y = peso_final, fill = tratamiento)) + 
  geom_boxplot()
```

- Gráfico de cajas básico se obtiene usando la geometría `geom_boxplot()`.

- Mapping: 

    - `color` dentro de aes() mapea el color de la línea de la caja con otra variable.

    - `fill` dentro de aes(), en cambio, mapea el color de la caja con otra variable. 

## Gráfico de cajas {auto-animate="true"}

```{r}
#| output-location: column
#| out-width: 100%
bd_maca %>% 
  ggplot(aes(x = tratamiento, y = peso_final, fill = tratamiento, 
             color = tratamiento)) + 
  geom_boxplot()
```

- Gráfico de cajas básico se obtiene usando la geometría `geom_boxplot()`.

- Mapping: 

    - `color` dentro de aes() mapea el color de la línea de la caja con otra variable.

    - `fill` dentro de aes(), en cambio, mapea el color de la caja con otra variable. 

    - `color` y `fill` se pueden combinar.

## Gráfico de cajas {auto-animate="true"}

```{r}
#| output-location: column
#| out-width: 100%
bd_maca %>% 
  ggplot(aes(x = tratamiento, y = peso_final)) + 
  geom_boxplot(fill = "blue", color = "blue")
```

- Gráfico de cajas básico se obtiene usando la geometría `geom_boxplot()`.

- Setting:

    - Podemos configurar `color` y `fill` para que todos tengan un solo color.
    - Esto se hace siempre 1) fuera del `aes()` y dentor de la geometría `geom_`.
    
## Gráfico de cajas {auto-animate="true"}

```{r}
#| output-location: column
#| out-width: 100%
bd_maca %>% 
  ggplot(aes(x = tratamiento, y = peso_final)) + 
  geom_boxplot(fill = "blue", color = "blue", alpha = 0.2)
```

- Gráfico de cajas básico se obtiene usando la geometría `geom_boxplot()`.

- Otras estéticas: 

    - Podemos agregar transparencias y tamaños.
    
## Gráfico de cajas {auto-animate="true"}

```{r}
#| output-location: column
#| out-width: 100%
bd_maca %>% 
  ggplot(aes(x = tratamiento, y = peso_final)) + 
  geom_boxplot(fill = "blue", color = "blue", alpha = 0.2, 
               notch = TRUE)
```

- Gráfico de cajas básico se obtiene usando la geometría `geom_boxplot()`.

- Notch

    - Podemos también agregar unas muescas o `notch` a las cajas.

## Gráfico de cajas {auto-animate="true"}

```{r}
#| output-location: column
#| out-width: 100%
bd_maca %>% 
  ggplot(aes(x = tratamiento, y = peso_final)) + 
  geom_boxplot(fill = "blue", color = "blue", alpha = 0.2, 
               notch = TRUE, notchwidth = 0.8)
```

- Gráfico de cajas básico se obtiene usando la geometría `geom_boxplot()`.

- Notch

    - Podemos también agregar unas muescas o `notch` a las cajas.
    
    - Y podemos controlar su tamaño.
    
## Gráfico de cajas {auto-animate="true"}

```{r}
#| output-location: column
#| out-width: 100%
bd_maca %>% 
  ggplot(aes(x = tratamiento, y = peso_final)) + 
  geom_boxplot(fill = "blue", color = "blue", alpha = 0.2, 
               notch = TRUE, notchwidth = 0.8) + 
  theme_bw()
```

- Gráfico de cajas básico se obtiene usando la geometría `geom_boxplot()`.

- Otros arreglos:

    - Podemos agregar temas, colores, etc.

## Gráfico de cajas {auto-animate="true"}

```{r}
#| output-location: column
#| out-width: 100%
bd_maca %>% 
  ggplot(aes(x = tratamiento, y = peso_final)) + 
  geom_boxplot(fill = "blue", color = "blue", alpha = 0.2, 
               notch = TRUE, notchwidth = 0.8) + 
  theme_bw() + 
  labs(x = "Tratamiento", y = "Peso al final (kg)") 
```

- Gráfico de cajas básico se obtiene usando la geometría `geom_boxplot()`.

- Otros arreglos:

    - Podemos agregar temas, colores, etiquetas, etc.
    
## Gráfico de cajas {auto-animate="true"}

```{r}
#| output-location: column
#| out-width: 100%
bd_maca %>% 
  ggplot(aes(x = tratamiento, y = peso_final)) + 
  geom_boxplot(fill = "blue", color = "blue", alpha = 0.2, 
               notch = TRUE, notchwidth = 0.8) + 
  theme_bw() + 
  labs(x = "Tratamiento", y = "Peso al final (kg)") + 
  scale_x_discrete(labels = c("Control", "Maca", "Maca + citro", 
                              "Sham", "Triple dosis de maca + citro"))
```

- Gráfico de cajas básico se obtiene usando la geometría `geom_boxplot()`.

- Otros arreglos:

    - Podemos agregar temas, colores, etiquetas, etc.
    - Si se quiere cambiar las etiquetas del eje x, se puede usar `scale_x_discrete`.


## Gráfico de cajas {auto-animate="true"}

```{r}
#| output-location: column
#| out-width: 100%
bd_maca %>% 
  ggplot(aes(x = tratamiento, y = peso_final)) + 
  geom_boxplot(fill = "blue", color = "blue", alpha = 0.2, 
               notch = TRUE, notchwidth = 0.8) + 
  theme_bw() + 
  labs(x = "Tratamiento", y = "Peso al final (kg)") + 
  scale_x_discrete(labels = c("Control \n (n = 5)", "Maca \n (n = 5)", 
                              "Maca + citro \n (n = 4)", "Sham \n (n = 4)",
                              "Triple dosis de maca + citro \n (n = 5)"))
```

- Gráfico de cajas básico se obtiene usando la geometría `geom_boxplot()`.

- Otros arreglos:

    - Podemos agregar temas, colores, etiquetas, etc.
    - Si se quiere cambiar las etiquetas del eje x, se puede usar `scale_x_discrete`.
    - Se sugiere siempre agregar el tamaño de muestra `n`. 
        + El término `\n` es un salto de línea.

## Gráfico de violin {auto-animate="true"}

```{r}
#| output-location: column
#| out-width: 100%
bd_maca %>% 
  ggplot(aes(x = tratamiento, y = peso_final)) + 
  geom_violin()
```

- Gráfico de violín básico se obtiene usando la geometría `geom_violin()`. 

## Gráfico de violin {auto-animate="true"}

```{r}
#| output-location: column
#| out-width: 100%
bd_maca %>% 
  ggplot(aes(x = tratamiento, y = peso_final, color = tratamiento)) + 
  geom_violin()
```

- Gráfico de violín básico se obtiene usando la geometría `geom_violin()`.

- Mapping: 

    - `color` dentro de aes() mapea el color de la línea de la caja con otra variable. 

## Gráfico de violin {auto-animate="true"}

```{r}
#| output-location: column
#| out-width: 100%
bd_maca %>% 
  ggplot(aes(x = tratamiento, y = peso_final, fill = tratamiento)) + 
  geom_violin()
```

- Gráfico de violín básico se obtiene usando la geometría `geom_violin()`.

- Mapping: 

    - `color` dentro de aes() mapea el color de la línea del violin con otra variable.

    - `fill` dentro de aes(), en cambio, mapea el color del violin con otra variable. 

## Gráfico de violin {auto-animate="true"}

```{r}
#| output-location: column
#| out-width: 100%
bd_maca %>% 
  ggplot(aes(x = tratamiento, y = peso_final, fill = tratamiento, 
             color = tratamiento)) + 
  geom_violin()
```

- Gráfico de violín básico se obtiene usando la geometría `geom_violin()`.

- Mapping: 

    - `color` dentro de aes() mapea el color de la línea del violin con otra variable.

    - `fill` dentro de aes(), en cambio, mapea el color del violin con otra variable. 

    - `color` y `fill` se pueden combinar.

## Gráfico de violin {auto-animate="true"}

```{r}
#| output-location: column
#| out-width: 100%
bd_maca %>% 
  ggplot(aes(x = tratamiento, y = peso_final)) + 
  geom_violin(fill = "blue", color = "blue")
```

- Gráfico de violín básico se obtiene usando la geometría `geom_violin()`.

- Setting:

    - Podemos configurar `color` y `fill` para que todos tengan un solo color.
    - Esto se hace siempre 1) fuera del `aes()` y dentor de la geometría `geom_`.
    
## Gráfico de violin {auto-animate="true"}

```{r}
#| output-location: column
#| out-width: 100%
bd_maca %>% 
  ggplot(aes(x = tratamiento, y = peso_final)) + 
  geom_violin(fill = "blue", color = "blue", alpha = 0.2)
```

- Gráfico de violín básico se obtiene usando la geometría `geom_violin()`.

- Otras estéticas: 

    - Podemos agregar transparencias y tamaños.
    
## Gráfico de violin {auto-animate="true"}

```{r}
#| output-location: column
#| out-width: 100%
bd_maca %>% 
  ggplot(aes(x = tratamiento, y = peso_final)) + 
  geom_violin(fill = "blue", color = "blue", alpha = 0.2) + 
  theme_bw()
```

- Gráfico de violín básico se obtiene usando la geometría `geom_violin()`.

- Otros arreglos:

    - Podemos agregar temas, colores, etc.

## Gráfico de violin {auto-animate="true"}

```{r}
#| output-location: column
#| out-width: 100%
bd_maca %>% 
  ggplot(aes(x = tratamiento, y = peso_final)) + 
  geom_violin(fill = "blue", color = "blue", alpha = 0.2) + 
  theme_bw() + 
  labs(x = "Tratamiento", y = "Peso al final (kg)") 
```

- Gráfico de violín básico se obtiene usando la geometría `geom_violin()`.

- Otros arreglos:

    - Podemos agregar temas, colores, etiquetas, etc.
    
## Gráfico de violin {auto-animate="true"}

```{r}
#| output-location: column
#| out-width: 100%
bd_maca %>% 
  ggplot(aes(x = tratamiento, y = peso_final)) + 
  geom_violin(fill = "blue", color = "blue", alpha = 0.2) + 
  theme_bw() + 
  labs(x = "Tratamiento", y = "Peso al final (kg)") + 
  scale_x_discrete(labels = c("Control", "Maca", "Maca + citro", 
                              "Sham", "Triple dosis de maca + citro"))
```

- Gráfico de violín básico se obtiene usando la geometría `geom_violin()`.

- Otros arreglos:

    - Podemos agregar temas, colores, etiquetas, etc.
    - Si se quiere cambiar las etiquetas del eje x, se puede usar `scale_x_discrete`.


## Gráfico de violin {auto-animate="true"}

```{r}
#| output-location: column
#| out-width: 100%
bd_maca %>% 
  ggplot(aes(x = tratamiento, y = peso_final)) + 
  geom_violin(fill = "blue", color = "blue", alpha = 0.2) + 
  theme_bw() + 
  labs(x = "Tratamiento", y = "Peso al final (kg)") + 
  scale_x_discrete(labels = c("Control \n (n = 5)", "Maca \n (n = 5)", 
                              "Maca + citro \n (n = 4)", "Sham \n (n = 4)", 
                              "Triple dosis de maca + citro \n (n = 5)"))
```

- Gráfico de violín básico se obtiene usando la geometría `geom_violin()`.

- Otros arreglos:

    - Podemos agregar temas, colores, etiquetas, etc.
    - Si se quiere cambiar las etiquetas del eje x, se puede usar `scale_x_discrete`.
    - Se sugiere siempre agregar el tamaño de muestra `n`.
            + El término `\n` es un salto de línea.

## Gráfico de densidad {auto-animate="true"}

```{r}
#| output-location: column
#| out-width: 100%
bd_inmuno %>% 
  ggplot(aes(x = IgG_Basal, color = tipo_refuerzo)) + 
  geom_density() 
```

- No usamos `y = `, ya que esta se reserva para la `desnsidad`. 

- Mapping: 

    - Usamos, en cambio, `color`, para crear los grupos en base a otra variable.
    
## Gráfico de densidad {auto-animate="true"}

```{r}
#| output-location: column
#| out-width: 100%
bd_inmuno %>% 
  ggplot(aes(x = IgG_Basal, color = tipo_refuerzo, 
             fill = tipo_refuerzo)) + 
  geom_density() 
```

- No usamos `y = `, ya que esta se reserva para la `desnsidad`. 

- Mapping: 

    - Usamos, en cambio, `color`, para crear los grupos en base a otra variable.
    - También podemos usar `fill`, el cual rellena el área bajo la curva de densidad.
    
    
## Gráfico de densidad {auto-animate="true"}

```{r}
#| output-location: column
#| out-width: 100%
bd_inmuno %>% 
  ggplot(aes(x = IgG_Basal, color = tipo_refuerzo, 
             fill = tipo_refuerzo)) + 
  geom_density(alpha = 0.3) 
```

- No usamos `y = `, ya que esta se reserva para la `desnsidad`. 

- Mapping: 

    - Usamos, en cambio, `color`, para crear los grupos en base a otra variable.
    - También podemos usar `fill`, el cual rellena el área bajo la curva de densidad.
    
- Setting:

    - Podemos configurar la transparencia para que ambas curvas se observa.
    
## Gráfico de densidad {auto-animate="true"}

```{r}
#| output-location: column
#| out-width: 100%
bd_inmuno %>% 
  ggplot(aes(x = IgG_Basal, color = tipo_refuerzo, 
             fill = tipo_refuerzo)) + 
  geom_density(position = "stack") 
```

- No usamos `y = `, ya que esta se reserva para la `desnsidad`. 

- Stacking:
    - Podemos también apilar los gráficos con `position = "stack"`.
    
        
## Gráfico de densidad {auto-animate="true"}

```{r}
#| output-location: column
#| out-width: 100%
bd_inmuno %>% 
  ggplot(aes(x = IgG_Basal, color = tipo_refuerzo, 
             fill = tipo_refuerzo)) + 
  geom_density(position = "stack") + 
  theme_classic() + 
  labs(x = "IgG en la medición basal", y = "Densidad", 
       color = "Tipo de refuerzo", fill = "Tipo de refuerzo") + 
  scale_fill_brewer(palette = "Dark2")
```

- No usamos `y = `, ya que esta se reserva para la `desnsidad`. 

- Edición:
    - Podemos agregar temas, etiquetas, etc, como en cualquier otro gráfico ggplot.

        
## Gráfico de densidad {auto-animate="true"}

```{r}
#| output-location: column
#| out-width: 100%
bd_inmuno %>% 
  ggplot(aes(x = IgG_Basal, color = sexo, 
             fill = sexo)) + 
  geom_density() + 
  facet_grid(. ~ sexo)
```

- No usamos `y = `, ya que esta se reserva para la `desnsidad`. 

- `facet_grid` también permite comparar, pero en paneles separados.

## Gráfico de densidad {auto-animate="true"}

```{r}
#| output-location: column
#| out-width: 100%
bd_inmuno %>% 
  filter(!is.na(sexo)) %>% 
  ggplot(aes(x = IgG_Basal, color = sexo, 
             fill = sexo)) + 
  geom_density() + 
  facet_grid(. ~ sexo)
```

- No usamos `y = `, ya que esta se reserva para la `desnsidad`. 

- `facet_grid` también permite comparar, pero en paneles separados.

    + Los datos perdidos pueden filtrarse con `filter(!is.na(variable_con_missings))`. 
    
## Gráfico de densidad {auto-animate="true"}

```{r}
#| output-location: column
#| out-width: 100%
bd_inmuno %>% 
  filter(!is.na(sexo)) %>% 
  ggplot(aes(x = IgG_Basal, color = sexo, 
             fill = sexo)) + 
  geom_density() + 
  facet_wrap(. ~ sexo)
```

- No usamos `y = `, ya que esta se reserva para la `desnsidad`. 

- `facet_wrap` también permite comparar, pero en paneles separados.

    + Los datos perdidos pueden filtrarse con `filter(!is.na(variable_con_missings))`. 

## Gráficos de histograma  {auto-animate="true"}

- Similar a lo visto en gráficos de densidad.

- Solo cambiar `geom_density()` por `geom_histogram()`. 

```{r}
#| output-location: column
#| out-width: 100%
bd_inmuno %>% 
  ggplot(aes(x = IgG_Basal, color = tipo_refuerzo, fill = tipo_refuerzo)) + 
  geom_density(alpha = 0.5) + 
  theme_minimal()
```

## Gráficos de histograma  {auto-animate="true"}

- Similar a lo visto en gráficos de densidad.

- Solo cambiar `geom_density()` por `geom_histogram()`. 

```{r}
#| output-location: column
#| out-width: 100%
bd_inmuno %>% 
  ggplot(aes(x = IgG_Basal, color = tipo_refuerzo, fill = tipo_refuerzo)) + 
  geom_histogram(alpha = 0.5)  + 
  theme_minimal()
```

## Gráficos de histograma  {auto-animate="true"}

- Similar a lo visto en gráficos de densidad.

- Solo cambiar `geom_density()` por `geom_histogram()`. 

```{r}
#| output-location: column
#| out-width: 100%
bd_inmuno %>% 
  filter(!is.na(sexo)) %>% 
  ggplot(aes(x = IgG_Basal, color = sexo, 
             fill = sexo)) + 
  geom_density() + 
  facet_wrap(. ~ sexo) + 
  theme_minimal()
```

## Gráficos de histograma  {auto-animate="true"}

- Similar a lo visto en gráficos de densidad.

- Solo cambiar `geom_density()` por `geom_histogram()`. 

```{r}
#| output-location: column
#| out-width: 100%
bd_inmuno %>% 
  filter(!is.na(sexo)) %>% 
  ggplot(aes(x = IgG_Basal, color = sexo, 
             fill = sexo)) + 
  geom_histogram() + 
  facet_wrap(. ~ sexo) + 
  theme_minimal()
```

## Ridgelines  {auto-animate="true"}

- Son una forma elengate de apilar gráficos de densidad o de histograma.

```{r}
library(ggridges)
```

```{r}
#| output-location: column
#| out-width: 100%
bd_maca %>% 
  ggplot(aes(x = peso_final, y = tratamiento)) + 
  geom_density_ridges()
```

## Ridgelines  {auto-animate="true"}

- Son una forma elengate de apilar gráficos de densidad o de histograma.

```{r}
bd_maca %>% 
  ggplot(aes(x = peso_final, y = tratamiento)) + 
  geom_density_ridges() + 
  theme_ridges()
```

- `ggridges` tiene su propio tema.


## Ridgelines  {auto-animate="true"}

- Son una forma elengate de apilar gráficos de densidad o de histograma.

```{r}
#| output-location: column
#| out-width: 100%
bd_maca %>% 
  ggplot(aes(x = peso_final, y = tratamiento, 
             fill = tratamiento)) + 
  geom_density_ridges() + 
  theme_ridges()
```

- `ggridges` tiene su propio tema.

- Se puede mapear el fill para mejorar visualización

## Ridgelines  {auto-animate="true"}

- Son una forma elengate de apilar gráficos de densidad o de histograma.

```{r}
#| output-location: column
#| out-width: 100%
bd_maca %>% 
  ggplot(aes(x = peso_final, y = tratamiento, 
             fill = tratamiento)) + 
  geom_density_ridges() + 
  theme_ridges() + 
  theme(legend.position = "none")
```

- `ggridges` tiene su propio tema.

- Se puede mapear el fill para mejorar visualización

- También quitar leyenda.

## Gráfico de puntos {auto-animate="true"}

```{r}
#| output-location: column
#| out-width: 100%
bd_inmuno %>% 
  ggplot(aes(x = sexo, y = IgG_Final, 
             color = sexo)) + 
  geom_point() + 
  theme_bw()
```

- Se pueden usar para representar variables numéricas según categorías.

## Gráfico de puntos {auto-animate="true"}

```{r}
#| output-location: column
#| out-width: 100%
bd_inmuno %>% 
  ggplot(aes(x = sexo, y = IgG_Final, 
             color = sexo)) + 
  geom_jitter() + 
  theme_bw()
```

- Se pueden usar para representar variables numéricas según categorías.

- Sin embargo, a menudo se traslapan los puntos, por lo que se prefiere agregar cierto jittering.

## Gráfico de puntos {auto-animate="true"}

```{r}
#| output-location: column
#| out-width: 100%
bd_inmuno %>% 
  filter(!is.na(sexo)) %>% 
  ggplot(aes(x = sexo, y = IgG_Final, 
             color = sexo)) + 
  geom_jitter() + 
  theme_bw()
```

- Se pueden usar para representar variables numéricas según categorías.

- Sin embargo, a menudo se traslapan los puntos, por lo que se prefiere agregar cierto jittering.

- Se puede eliminar los datos perdidos con filter.


## Gráfico beeswarm {auto-animate="true"}

- Una forma más ordenada y elegante de colocar puntos es mediante el gráfico de beeswarm.

```{r}
library(ggbeeswarm)
#| output-location: column
#| out-width: 100%
bd_inmuno %>% 
  filter(!is.na(sexo)) %>% 
  ggplot(aes(x = sexo, y = IgG_Final, 
             color = sexo)) + 
  geom_beeswarm() + 
  theme_bw()
```

## Gráfico beeswarm {auto-animate="true"}

- Una forma más ordenada y elegante de colocar puntos es mediante el gráfico de beeswarm.

```{r}
library(ggbeeswarm)
#| output-location: column
#| out-width: 100%
bd_inmuno %>% 
  filter(!is.na(sexo)) %>% 
  ggplot(aes(x = sexo, y = IgG_Final, 
             color = sexo)) + 
  geom_beeswarm() + 
  theme_bw()
```

- Podemos configurar la forma de los puntos controlando el argumento `priority = `.

    + Por defecto es `priority = "ascending"`.
    
## Gráfico beeswarm {auto-animate="true"}

- Una forma más ordenada y elegante de colocar puntos es mediante el gráfico de beeswarm.

```{r}
library(ggbeeswarm)
#| output-location: column
#| out-width: 100%
bd_inmuno %>% 
  filter(!is.na(sexo)) %>% 
  ggplot(aes(x = sexo, y = IgG_Final, 
             color = sexo)) + 
  geom_beeswarm(priority = "descending") + 
  theme_bw()
```

- Podemos configurar la forma de los puntos controlando el argumento `priority = `.

    + Por defecto es `priority = "ascending"`.
    + Se puede usar "descending".
    
## Gráfico beeswarm {auto-animate="true"}

- Una forma más ordenada y elegante de colocar puntos es mediante el gráfico de beeswarm.

```{r}
library(ggbeeswarm)
#| output-location: column
#| out-width: 100%
bd_inmuno %>% 
  filter(!is.na(sexo)) %>% 
  ggplot(aes(x = sexo, y = IgG_Final, 
             color = sexo)) + 
  geom_beeswarm(priority = "density") + 
  theme_bw()
```

- Podemos configurar la forma de los puntos controlando el argumento `priority = `.

    + Por defecto es `priority = "ascending"`.
    + Se puede usar "descending".
    + También "density".
    
## Gráfico beeswarm {auto-animate="true"}

- Una forma más ordenada y elegante de colocar puntos es mediante el gráfico de beeswarm.

```{r}
library(ggbeeswarm)
#| output-location: column
#| out-width: 100%
bd_inmuno %>% 
  filter(!is.na(sexo)) %>% 
  ggplot(aes(x = sexo, y = IgG_Final, 
             color = sexo)) + 
  geom_beeswarm(priority = "random") + 
  theme_bw()
```

- Podemos configurar la forma de los puntos controlando el argumento `priority = `.

    + Por defecto es `priority = "ascending"`.
    + Se puede usar "descending".
    + También "density".
    + Otra opción es "random"

## Gráfico beeswarm {auto-animate="true"}

- Una forma más ordenada y elegante de colocar puntos es mediante el gráfico de beeswarm.

```{r}
library(ggbeeswarm)
#| output-location: column
#| out-width: 100%
bd_inmuno %>% 
  filter(!is.na(sexo)) %>% 
  ggplot(aes(x = sexo, y = IgG_Final, 
             color = sexo)) + 
  geom_quasirandom() + 
  theme_bw()
```

- Podemos también usar `geom_quasirandom()`, que por defecto usa el método "quasirandom".

## Gráfico beeswarm {auto-animate="true"}

- Una forma más ordenada y elegante de colocar puntos es mediante el gráfico de beeswarm.

```{r}
library(ggbeeswarm)
#| output-location: column
#| out-width: 100%
bd_inmuno %>% 
  filter(!is.na(sexo)) %>% 
  ggplot(aes(x = sexo, y = IgG_Final, 
             color = sexo)) + 
  geom_quasirandom(method = "pseudorandom") + 
  theme_bw()
```

- Podemos también usar `geom_quasirandom()`, que por defecto usa el método "quasirandom".

    + Podemos cambiar el método por "pseudorandom".
    
## Gráfico beeswarm {auto-animate="true"}

- Una forma más ordenada y elegante de colocar puntos es mediante el gráfico de beeswarm.

```{r}
library(ggbeeswarm)
#| output-location: column
#| out-width: 100%
bd_inmuno %>% 
  filter(!is.na(sexo)) %>% 
  ggplot(aes(x = sexo, y = IgG_Final, 
             color = sexo)) + 
  geom_quasirandom(method = "smiley") + 
  theme_bw()
```

- Podemos también usar `geom_quasirandom()`, que por defecto usa el método "quasirandom".

    + Podemos cambiar el método por "pseudorandom".
    + También por "smiley"
 
## Gráfico beeswarm {auto-animate="true"}

- Una forma más ordenada y elegante de colocar puntos es mediante el gráfico de beeswarm.

```{r}
library(ggbeeswarm)
#| output-location: column
#| out-width: 100%
bd_inmuno %>% 
  filter(!is.na(sexo)) %>% 
  ggplot(aes(x = sexo, y = IgG_Final, 
             color = sexo)) + 
  geom_quasirandom(method = "frowney") + 
  theme_bw()
```

- Podemos también usar `geom_quasirandom()`, que por defecto usa el método "quasirandom".

    + Podemos cambiar el método por "pseudorandom"
    + También por "smiley". 
    + Por último, "frowney"
   
## Gráficos combinados: Puntos y caja {auto-animate="true"}

```{r}
bd_inmuno %>% 
  filter(!is.na(sexo)) %>% 
  ggplot(aes(x = sexo, y = IgG_Final, 
             color = sexo)) + 
  geom_boxplot() + 
  geom_point()
```

## Gráficos combinados: Puntos y caja {auto-animate="true"}

```{r}
bd_inmuno %>% 
  filter(!is.na(sexo)) %>% 
  ggplot(aes(x = sexo, y = IgG_Final, 
             color = sexo)) + 
  geom_boxplot() + 
  geom_jitter()
```

- A veces es mejor agregar cierto jittering con `geom_jitter()` en vez de `geom_point()`. 

## Gráficos combinados: Violin y caja {auto-animate="true"}

```{r}
bd_inmuno %>% 
  filter(!is.na(sexo)) %>% 
  ggplot(aes(x = sexo, y = IgG_Final, 
             color = sexo)) + 
  geom_violin() + 
  geom_boxplot()
```

## Gráficos combinados: Violin y caja {auto-animate="true"}

```{r}
bd_inmuno %>% 
  filter(!is.na(sexo)) %>% 
  ggplot(aes(x = sexo, y = IgG_Final, 
             color = sexo)) + 
  geom_violin() + 
  geom_boxplot(width = 0.3)
```

- Se debe controlar el tamaño de la caja para que esta encaje mediante el argumento `width = `


## Gráficos combinados: Violin y caja {auto-animate="true"}

```{r}
bd_inmuno %>% 
  filter(!is.na(sexo)) %>% 
  ggplot(aes(x = sexo, y = IgG_Final, 
             fill = sexo, color = sexo)) + 
  geom_violin(trim = FALSE, alpha = 0.5) + 
  geom_boxplot(width = 0.3, fill = "white") + 
  theme_classic() + 
  labs(x = "", y = "IgG al final del estudio (BAU/ml)", 
       fill = "Sexo", color = "Sexo") + 
  scale_fill_brewer(palette = "RdBu")
```

- Se debe controlar el tamaño de la caja para que esta encaje mediante el argumento `width = `

- Se pueden controlar otras característicsa para mejorar la visualizaicón.

## Gráficos combinados: Violin y caja y pu {auto-animate="true"}

```{r}
bd_inmuno %>% 
  filter(!is.na(sexo)) %>% 
  ggplot(aes(x = sexo, y = IgG_Final, 
             fill = sexo, color = sexo)) + 
  geom_violin(trim = FALSE, alpha = 0.5) + 
  geom_boxplot(width = 0.3, fill = "white") + 
  geom_jitter(width = 0.15, alpha = 0.5) + 
  theme_classic() + 
  labs(x = "", y = "IgG al final del estudio (BAU/ml)", 
       fill = "Sexo", color = "Sexo") + 
  scale_fill_brewer(palette = "RdBu")


```

- Se debe controlar el tamaño de la caja para que esta encaje mediante el argumento `width = `

- Se pueden controlar otras característicsa para mejorar la visualizaicón.

## Puntos y caja

https://r-graph-gallery.com/89-box-and-scatter-plot-with-ggplot2.html

## Violin y caja

## half-half


