---
format: 
  revealjs: 
    self-contained: true
    theme: [default, theme/theme.scss]
    footer: "R Aplicado a los Proyectos de Investigación - Sesión 1"
    logo: img/icon-512-insnsb.jpg
    transition: convex
    background-transition: zoom
    incremental: false
    slide-number: c/t
    preview-links: true
    # width: 1920
    # height: 1080
    height: 900
    width: 1600
    # parallax-background-image: images/bg-ietsi-slide-first.png
    # parallax-background-size: "1920px 1080px"
    # chalkboard: true
    code-block-background: true
    code-block-border-left: "#31BAE9"
    highlight-style: ayu-dark
    echo: true
    multiplex: true
    touch: true
    auto-stretch: true
    link-external-icon: true
    link-external-newwindow: true
    self-contained-math: true
    
from: markdown+emoji
execute:
  echo: true
filters:
  - reveal-auto-agenda
auto-agenda:
  bullets: numbered
  heading: Agenda
---

\

\

<h1>Sesión 1</h1>

<h2>[Curso: R Aplicado a los Proyectos de Investigación]{.plo}</h2>

<hr>

<h3>[Percy Soto-Becerra, M.D., M.Sc(c)]{.negro}</h3>

<h4>[InkaStats Data Science Solutions | Medical Branch]{.negro}</h4>

<h4>[2022-10-03]{.negro}</h4>

`r fontawesome::fa("github", "black")` &nbsp; [https://github.com/psotob91](https://github.com/psotob91)

![](img/social-image-f22.png){.absolute top=390 left=950 width="600"}


# Introducción a la Estadística y Ciencia de Datos

```{r}
#| echo: false
#| output: false

# Removing all objects including loaded libraries
rm(list = ls(all = TRUE))
gc()

# Installing and loading packages
if (!require("pacman")) {
  install.packages("pacman")
}

pacman::p_unload("all") # Unloading all package except base

pacman::p_load(tidyverse, 
               tibble, 
               pander, 
               gt, 
               kableExtra) # Loading packages
```

## Datos y mundo actual
<hr>

\

::: r-stack
![](img/fda-realworld.png){.fragment}

![](img/nature-bigdata.png){.fragment}

![](img/jama-machine.png){.fragment}

![](img/cleveland-ibm.png){.fragment}
:::

## La crisis de replicabilidad de la Ciencia 
<hr>

<h2>(incluyendo Ciencias Médicas)</h2>

![](img/replication.png)

## Ciencia de Datos
<hr>

<h3>[En general]{.verde-h3}</h3>

-   La Ciencia de Datos es una disciplina que se dedica al estudio y aplicación de técnicas diversas (estadística, informática, etc.) para convertir datos crudos en información y conocimiento.

-   En este curso aprenderemos a hacer esto de manera ordenada.

-   Este es un curso introductorio con énfasis en pensamiento estadístico.

. . .

<h3>[En salud]{.verde-h3}</h3>

> Ciencia de Datos en Salud (Health Data Science en inglés) es la ciencia y el arte de generar soluciones basadas en datos a través de la comprensión de problemas de salud complejos del mundo real, empleando el pensamiento crítico y el análisis para derivar conocimiento de los (grandes) datos.[^1]

[^1]: <https://cbdrh.med.unsw.edu.au/what-health-data-science>

# Análisis de datos reproducible

## Checklist de reproducibilidad
<hr>

> ¿Qué significa que un análisis de datos es "reproducible"?

<h3>[A corto plazo]{.verde-h3}</h3>

-   ¿Las tablas y figuras se pueden reproducir del código y datos?

-   ¿El código realmenet hace lo que quieres que haga?

-   ¿Es claro por qué el código hace lo que hace?

<h3>[A largo plazo]{.verde-h3}</h3>

-   ¿Puede el código ser usado con otros datos?

-   ¿Puedes extender el código a otros usos?

## Flujograma de ciencia de datos
<hr>

::: r-stack
![](img/data-science-cycle.001.png){.fragment}

![](img/data-science-cycle.002.png){.fragment}

![](img/data-science-cycle.003.png){.fragment}

![](img/data-science-cycle.004.png){.fragment}

![](img/data-science-cycle.005.png){.fragment}

![](img/data-science-cycle.006.png){.fragment}

![](img/data-science-cycle.007.png){.fragment}

![](img/data-science-cycle.008.png){.fragment}

![](img/data-science-cycle.009.png){.fragment}
:::

## Kit de herramientas para reproducibilidad
<hr>

\ 

. . .

-   Flujo de trabajo reproducible

    -   Scriptabilidad `r fontawesome::fa("arrow-right")` {{< fa brands r-project >}}

    -   Programación literaria (código, narrativa, salida en un solo lugar) `r fontawesome::fa("arrow-right")` Markdown {{< fa brands markdown >}}

    -   Versión de control `r fontawesome::fa("arrow-right")` Git / Github {{< fa brands github >}}

. . .

-   En este curso nos enfocaremos en `Scriptabilidad` y `Programación literaria`.

# R y RStudio

## R y RStudio
<hr>

\

:::: {.columns}
::: {.column width="50%"}

```{r}
#| echo: false
#| fig-align: center
#| out.width: 30%
knitr::include_graphics("img/R.png")
```

- [R](https://www.r-project.org/) es un `lenguaje de programación` estadística de código abierto.

- R también es un entorno para computación estadística y gráfica.

- Está potenciado con `paquetes`.

:::

::: {.column width="50%"}

```{r}
#| echo: false
#| fig-align: center
#| out.width: 70%
knitr::include_graphics("img/RStudio.png")
```


- [RStudio](https://www.rstudio.com/) es una interfaz para R denominada `IDE` (*integrated development environment*).

- RStudio no es requerido para programar con R, pero es uno de los IDE más comúnmente utilizados.

- Actualmente convirtiéndose en [posit](https://posit.co/).

:::
::::

## El problema de R: su aspecto
<hr>

![](img/Rconsola.png){fig-align="center"}

## RStudio: el chasis del carro
<hr>

![](img/RStudioConsola.png){fig-align="center"}

## En resumen, R y RStudio
<hr>

\

![](img/ryrstudio.png){fig-align="center"}

## En resumen, R y RStudio
<hr>

![](img/rvsrstudio.png){fig-align="center"}


## Jerga básica de R
<hr>

>`Objeto:` Cualquier abstracción en R. Los datos son objetos en R.

>`Función:` Código capaz de realizar una acción específica con los datos. También es un objeto: un objeto que actúa sobre otros objetos.

>`Paquetes:` *Library* en inglés. Conjunto de funciones que realizan acciones a menudo relacionadas en R.

>`Paquetes de R base:` Conjunto de paquetes instalados por defecto en R.
  
>`Paquetes de R tidy:` Conjunto de paquetes que siguen el estilo tidy en R.

## Paquetes de R
<hr>

\ 

::: columns
::: {.column width="60%"}
- Los `paquetes` son las `unidades fundamentales` del código reproducible en R.

- Al 13 de junio de 2022, hay `18 560 paquetes` disponibles.

- ¡Trabajaremos con un pequeño (pero importante) conjunto de estos!

- Cada paquete contiene una o más `funciones` que ejecutan tareas.

- ¡Hay paquetes de todo tipo y para todos los gustos!
:::

:::{.column width="40%"}

```{r}
#| echo: false
#| fig-align: center
#| out.width: 100%
knitr::include_graphics("img/r-packages.png")
```
:::
:::


## R y sus paquetes
<hr>

\

```{r}
#| echo: false
#| fig-align: center
#| out.width: 200%
knitr::include_graphics("img/r-rpackages.png")
```

::: aside
<br> <FONT size='4'>*Tomado de Sesion 2. Introducción a R y RStudio. Valle Andree y Loyola Steev.* \[[Enlace](https://docs.google.com/presentation/d/1tadIMMxP6oy2JaXIBGIhWw2CNUXT9rNIbXbdBjP3Nrs/edit#slide=id.p)\]</FONT>
:::

## En resumen: R, RStudio y sus paquetes
<hr>

```{r}
#| echo: false
#| fig-align: center
#| out.width: 90%
knitr::include_graphics("img/r-rstudio-paq.png")
```

::: aside
<br> <FONT size='4'>*Tomado de Sesion 2. Introducción a R y RStudio. Valle Andree y Loyola Steev.* \[[Enlace](https://docs.google.com/presentation/d/1tadIMMxP6oy2JaXIBGIhWw2CNUXT9rNIbXbdBjP3Nrs/edit#slide=id.p)\]</FONT>
:::

## tidyverse
<hr>

::: columns
::: {.column width="40%"}

\ \ 

```{r}
#| echo: false
#| out.width: 99%
knitr::include_graphics("img/tidyverse.png")
```

:::

:::{.column width="60%"}

<center><h2>[tidyverse.org](https://www.tidyverse.org/)</h2></center>

- `Tidyverse` es una `colección grande de paquetes de R` diseñados para hacer ciencia de datos: Es un `metapaquete`.

    - Todos los paquetes comparten una filosofía subyacente y una gramática común.

- R, como todo lenguaje, tiene varios dialectos. 

    - Dos dialectos predominan: `R base` y `R tidy`.

    - `R tidy` se basa en la filosofía de tidyverse. 

- Usaremos este enfoque predominantemente y `R base` cuando no tenga remplazo o sea más sencillo usarlo.

:::
:::

# Aspectos elementales de R y Rstudio

## Primero instale R, R Studio y R tools
<hr>

- Si aún no ha instalado R y RStudio, revise el tutorial de instalación de R que hemos preparado para el curso: 

    + [Enlace aquí](https://rcds3.inkastats.es/resource/manual_installr/install).

- Pause el video, instale y vuelva cuando todo esté listo.

```{r}
#| echo: false
#| fig-align: center
knitr::include_graphics("img/install-r.gif")
```

## `r fontawesome::fa("laptop-code", "white")` Nuestro turno {background-color="#000000"}

<hr>

\

-   Ingrese al siguiente enlace <https://cloud.r-project.org/> y descargue R.

- Ingrese al siguiente enlace <https://www.rstudio.com/products/rstudio/download/#download> y descargue RStudio.

- ¿Es usuario de MS Windows? 

    + Ingrese al siguiente enlace <https://cloud.r-project.org/> y descargue RTools.

- ¿Es usuario de Mac o Linux? 

    + No haga nada más.

\
\
\

```{r}
#| echo: false
library(countdown)
countdown_timer <- function(
    minutes = 1, 
    play_sound = TRUE, 
    font_size = "2em", 
    ...
) {
  countdown(
    minutes = minutes,
    # Fanfare when it's over
    play_sound = play_sound,
    # Set timer theme to match solarized colors
    color_border              = "#404041",
    color_text                = "white",
    color_background = "#000000",
    color_running_background  = "#72994E",
    color_running_text        = "white",
    color_finished_background = "#EE6331",
    color_finished_text       = "white",
    font_size = font_size,
    ...
  )
}

```

```{R}
#| echo: false
countdown_timer(10)
```

## Ventanas de RStudio
<hr>

\

![](img/rstudio-partes.png){fig-align="center"}


## Código en scripts de R

<hr>

::: columns
::: {.column width="70%"}
```{r}
#| echo: false
#| fig-align: center
#| out.width: 90%
knitr::include_graphics("img/r-script.png")
```


:::

::: {.column width="30%"}

\

- El `código` se escribe en el `Script`, pero no se imprime.

- Los `resultados` se imprimen en la `consola`.

- Aunque es útil usar la consola, es preferible usar herramientas de programación literaria: 

    + RMarkdown o Quarto.

:::
:::

## R Markdown y Quarto
<hr>

\ 

:::: columns
::: {.column width="45%"}

<center><h2>[rmarkdown.rstudio.com](https://rmarkdown.rstudio.com/)</h2></center>

\ 

- `rmarkdown` y `quarto` permiten a los usuarios de R escribir su código y prosa en documentos computacionales reproducibles. 

- Por lo general, nos referimos a documentos R Markdown con la extensión `.Rmd` y a los documentos Quarto con la extensión `.qmd`.

:::

::: {.column width="55%"}

\ 

```{r}
#| echo: false
#| out.width: 100%
#| fig-align: center
knitr::include_graphics("img/rmarkdown.png")
```

:::

::::

## Archivo R Markdown (.Rmd) a PDF
<hr>

![](img/rmarkdown-pdf.png)

## R Markdown evolucionó a Quarto
<hr>

::: columns
::: {.column width="70%"}
::: r-stack
![](img/quarto.png)

![](img/quarto2.png){.fragment}
:::
:::

::: {.column width="30%"}
-   Recientemente, RStudio presentó Quarto: <https://quarto.org/>.
-   Quarto es la `versión mejorada` de RMarkdwon.
-   Si usaste RMarkdown, puedes ejecutar tus códigos en Quarto sin ningún problema.
-   Quarto permite ejecutar código Python, Julia y Observable.
:::
:::

## R Markdown y Quarto son muy flexibles
<hr>

\ 

-   Herramientas de `programación literaria`: 

    +   Legibles para la computadora y para el ser humano.
    
-   Útiles para alcanzar `reproducibilidad`.

-   También muy útiles para diversas actividades académicas: 

    +   Presentaciones académicas
    
    +   Artículos científicos
    
    +   Diseño de blogs, web u otra herramienta de difusión de conocimiento. 

## Quarto permite crear artículos
<hr>

![](img/quarto-articulos.png)


## Quarto permite crear presentaciones
<hr>

<h3>[De hecho, los slides de este curso están hechas en Quarto]{.verde-h3}</h3>

![](img/quarto-presentaciones.png)

## Quarto permite crear Website
<hr>

<h3>[¡Sí!, la web de este curso también está hecha en Quarto]{.verde-h3}</h3>

![](img/quarto-website.png)

## Quarto permite crear Libros
<hr>

<h3>[Quizás para una futura edición del curso]{.verde-h3}</h3>

![](img/quarto-website.png)

## Programación Literaria
<hr>

![](img/prog-literaria.png){fig-align="center"}

::: aside
<FONT size='4'>*Tomado de Sesion 2. Introducción a R y RStudio. Valle Andree y Loyola Steev.* \[[Enlace](https://docs.google.com/presentation/d/1tadIMMxP6oy2JaXIBGIhWw2CNUXT9rNIbXbdBjP3Nrs/edit#slide=id.p)\]</FONT>
:::

## ¿Cómo usaremos Quarto en el curso?
<hr>

\

- Cada ejercicio / reporte / proyecto / tarea / etc. será hecho en un documento R Markdown aumentado: Quarto. 

- Siempre te proporcionaremos una `plantilla` de documento Quarto para iniciar.

- Las plantillas irán modificándose conforme avancemos el curso. 

- Las plantillas son simplemente eso, plantillas, para usarlas en su día a día no necesita pensar mucho en ellas ni entenderlas a detalle.

- Yo entiendo menos del 20% de estas y aún así me sirven mucho para mi trabajo diario. ¡Sugiero comenzar haciendo lo mismo!

## Partes de un documento Quarto / R Markdown
<hr>

![](img/tour-rmarkdown.png)

::: aside
<br> <FONT size='4'>*Meet the toolkit: programming. datasciencebox.org.* \[[Enlace](https://datasciencebox.org/course-materials/_slides/u1-d02-toolkit-r/u1-d02-toolkit-r.html#1)\]</FONT>
:::

## `r fontawesome::fa("mug-saucer", "white")` Hagamos una pausa {background-color="#00817E"}
<hr>

::: r-fit-text

<center>

Tomemos un descanso de `5 minutos`...

Estire las piernas `r fontawesome::fa("person-walking", "white")`... 

Deje de ver las pantallas `r fontawesome::fa("laptop", "white")`...

... cualquier `r fontawesome::fa("laptop", "white")`, las del celular `r fontawesome::fa("mobile", "white")` también.

</center>

:::

```{r}
#| echo: false
library(countdown)
countdown_timer <- function(
    minutes = 1, 
    play_sound = TRUE, 
    font_size = "2em", 
    ...
) {
  countdown(
    minutes = minutes,
    # Fanfare when it's over
    play_sound = play_sound,
    # Set timer theme to match solarized colors
    color_border              = "#404041",
    color_text                = "white",
    color_background = "#000000",
    color_running_background  = "#72994E",
    color_running_text        = "white",
    color_finished_background = "#EE6331",
    color_finished_text       = "white",
    font_size = font_size,
    ...
  )
}
```

```{r}
#| echo: false
countdown_timer(5)
```

# Primeros pasos en R

## Antes de usar R, configure su ambiente de trabajo
<hr>

\

- **Paso 1:** Cree una carpeta de trabajo `r fontawesome::fa("folder")`. 

    + En donde quiera. Sea ordenado.  

- **Paso 2:** Abra RStudio `r fontawesome::fa("r-project")`. 

- **Paso 3:** Cree un proyecto y vincule el proyecto con la carpeta nueva. 

    + A partir de este momento, la carpeta que contiene el archivo `.Rproj` es denominada `carpeta raíz`. 
    
    + Todo lo que ocurra en R partirá de la carpeta raíz en adelante.

- **Paso 3:** Comience a trabajar. Puede usar `R scripts` o `R Markdown / Quarto`.

    + Nosotros usaremos `Quarto`.

## `r fontawesome::fa("laptop-code", "white")` Nuestro turno {background-color="#000000"}
<hr>

\

-   Cree una carpeta de trabajo en Documentos, llámela `mi_primer_proyecto`.
-   Cree un proyecto de Rstudio y ubíquelo en la carpeta nueva `mi_primer_proyecto`.
-   Cree el primer script de R, anote lo siguiente: `"# Este es mi primer script de R"` y guárdelo como `mi_primer_script.r`.
-   Cree el primer archivo .qmd de Quarto, anote lo siguiente: `"# Este es mi primer archivo quarto"` y guárdelo como `mi_primer_quarto.qmd`.
- Renderice el primer archivo quarto creado: `mi_primer_quarto.qmd`.
-   Verifique que los archivos han sido creados y se encuentran en la carpeta raíz `mi_primer_proyecto`.

\
\
\

```{r}
#| echo: false
library(countdown)
countdown_timer <- function(
    minutes = 1, 
    play_sound = TRUE, 
    font_size = "2em", 
    ...
) {
  countdown(
    minutes = minutes,
    # Fanfare when it's over
    play_sound = play_sound,
    # Set timer theme to match solarized colors
    color_border              = "#404041",
    color_text                = "white",
    color_background = "#000000",
    color_running_background  = "#72994E",
    color_running_text        = "white",
    color_finished_background = "#EE6331",
    color_finished_text       = "white",
    font_size = font_size,
    ...
  )
}

```

```{R}
#| echo: false
countdown_timer(10)
```

## R es una calculadora
<hr>

::: panel-tabset
### Básicas 1

::: columns
::: {.column width="50%"}
-   Suma:

```{r}
#| echo: true
3 + 8
```

-   Resta:

```{r}
#| echo: true
3 - 8
```
:::

::: {.column width="50%"}
-   Multiplicación

```{r}
#| echo: true
3 * 8
```

-   División

```{r}
#| echo: true
3 * 8
```
:::
:::

### Básicas 2

::: columns
::: {.column width="50%"}
-   Potencia:

```{r}
#| echo: true
3 ^ 3 # ^ se obtiene mediante: ALT + 94
```

-   Raíz cuadrada:

```{r}
#| echo: true
sqrt(16)
```
:::

::: {.column width="50%"}
-   Otra raíz

```{r}
#| echo: true
8 ^ (1 / 3) # Raíz cúbica
```

-   Operación combinada

```{r}
#| echo: true
15 + (64 - 60) ^ (1/2)
```
:::
:::

### Avanzadas 1

::: columns
::: {.column width="50%"}
-   Logaritmo natural:

```{r}
#| echo: true
log(12) # log es logaritmo natural o neperiano
```

-   Logaritmo base 10:

```{r}
#| echo: true
log10(100)
```
:::

::: {.column width="50%"}
-   Exponencial

```{r}
#| echo: true
exp(2)
```

-   pi

```{r}
#| echo: true
pi
```
:::
:::

### Comparaciones

::: columns
::: {.column width="50%"}
-   Mayor que:

```{r}
#| echo: true
5 > 4
```

-   Menor igual que:

```{r}
#| echo: true
6 <= 3
```
:::

::: {.column width="50%"}
-   Igualdad:

```{r}
#| echo: true
7 == 7
```

-   Diferente:

```{r}
#| echo: true
8 != 5
```
:::
:::

### Atajos de teclado

- Si tu teclado puede usar ASCII, puedes usar los siguientes atajos: 

```{r}
#| echo: false
#| output: asis
data.frame(
  Atajo = c("<kbd>Alt</kbd> + <kbd>94</kbd>", 
            "<kbd>Alt</kbd> + <kbd>126</kbd>", 
            "<kbd>Alt</kbd> + <kbd>38</kbd>", 
            "<kbd>Alt</kbd> + <kbd>124</kbd>"), 
  Simbolo = c("^", "~", "&", "|"), 
  Uso = c("... elevado a la potencia ...", "... en relación a ...", "... Y ...", "... O ..."), 
  Comentario = c("Aritmético", 
                 "Aritmético", 
                 "Booleano", 
                 "Booleano")
  ) %>% 
  pandoc.table(caption = "", 
               justify = "llll", 
               missing = "—", 
               split.tables = Inf, 
               col.names = c("Atajo", 
                             "Símbolo", 
                             "Significado", 
                             "Operador"))
```

- Si tu teclado no tiene ASCII, sugiero configurar teclado para que coincida con el idioma: [Tutorial 1](https://www.youtube.com/watch?v=PO5pU7KknY0) y [Tutorial 2](https://www.youtube.com/watch?v=Lm0I9xuy7n0).

:::

## `r fontawesome::fa("laptop-code", "white")` Nuestro turno {background-color="#000000"}
<hr>

-   En el script previamente creado `mi_primer_script.r`, escriba las siguientes operaciones matemáticas: cinco más ocho;  tres por 23; veinte elevado al cubo; setenta y tres entre cinco. Ejecute el código y mire el resultado en la consola.

- Copie las operaciones matemáticas escritas en `mi_primer_script.r` sobre `mi_primer_quarto.qmd`.

- El código debe colocarse como `chunk` de código par que pueda ejecutarse. Ejecute el código de cada chunk.
    
- Compare las salidas del `mi_primer_script.r` y de `mi_primer_quarto.qmd`.

- ¿El símbolo `#` se ejecuta igual en un script de R y en un quarto markdown? ¿Cuál es la diferencia?


```{r}
#| echo: false
library(countdown)
countdown_timer <- function(
    minutes = 1, 
    play_sound = TRUE, 
    font_size = "2em", 
    ...
) {
  countdown(
    minutes = minutes,
    # Fanfare when it's over
    play_sound = play_sound,
    # Set timer theme to match solarized colors
    color_border              = "#404041",
    color_text                = "white",
    color_background = "#000000",
    color_running_background  = "#72994E",
    color_running_text        = "white",
    color_finished_background = "#EE6331",
    color_finished_text       = "white",
    font_size = font_size,
    ...
  )
}
```

```{r}
#| echo: false
countdown_timer(10)
```

## R es más que una simple calculadora
<hr>

- Pero..., R es `más que solo una calculadora`...

- R es un `lenguaje` compuesto por "palabras".

- Las palabras son `objetos` en R:

    + Todo (casi) es un objeto.

- Los `verbos` de R son las `funciones`:

    + Ejecutan acciones sobre otros objetos.
    
    + Los objetos sobre los que recae la acción se incluyen entre paréntesis.
  
## Funciones en R
<hr>

:::: {.columns}

::: {.column width='45%'}


- Estructura general de una función:

```{.r}
ejecuta_accion(sobre_esto)
ejecuta_accion(sobre_esto, hacia_eso, con_esto)
```

\

- Dos funciones usuales son `install.packages` y `library`, las cuales instalan y cargan un paquete, respectivamente:

```{.r}
install.packages("package_name")
library(package_name)
```

:::

::: {.column width='55%'}

```{r}
#| echo: false
#| fig-align: center
#| out-width: 100%
knitr::include_graphics("img/funcion-R.png")
```


:::

::::


## Ayuda en R
<hr>

- La documentación acerca de una función puede ser consultada mediante `?`

```{.r}
?library
```

::: r-stack

![](img/help1.png){.fragment}

![](img/help2.png){.fragment}
:::

## Cargar conjunto de datos de R
<hr>

- Se pueden importar de diversas fuentes: MS Excel, .csv, .txt, Stata, SAS, SPSS, etc.

- Algunos paquetes cuentan también con datos en formato de R: `*.RData` o `.rds`.

:::: {.columns}

::: {.column width='50%'}

- Importar datos de paquetes de R:

```{r}
#| echo: true
library(medicaldata)
data(covid_testing)
```

- Consultar por descripción de los datos:

```{r}
#| eval: false
?covid_testing
```

:::

::: {.column width='50%'}

- Ver un resumen de los datos

```{r}
head(covid_testing)
```

:::

::::


## Operador esenciales de R base
<hr>

::: panel-tabset

## Operador seleccionar `$`

- En un conjunto de datos, permite seleccionar la columna de interés.

:::: {.columns}

::: {.column width='50%'}

- Por ejemplo, género de los participantes:

```{r}
covid_testing$gender
```

:::

::: {.column width='50%'}

- O la edad:

```{r}
covid_testing$age
```

:::

::::


## Operador asignar nombre `<-`

- `<-` representa una flecha que se lee: `asignar a`.       

- Permite guardar un objeto con un nombre dado

    - El objeto se guarda en el <kbd>Environment</kbd>.

```{r}
genero <- covid_testing$gender
```

- Luego, lo puedes llamar utilizando el nombre con el que lo guardaste.

```{r}
genero
```

:::

## El panel Environment

>Es un panel que muestra los objetos (data frames, matrices, vectores, funciones, etc.) que se tienen en el entorno de trabajo.

```{r}
#| echo: false
#| fig-align: center
#| out-width: 100%
knitr::include_graphics("img/environment.png")
```

## Imprimir y guardar resultado

::: {.panel-tabset}

### Solo imprimir

```{r}
#| echo: false
#| fig-align: center
#| out-width: 100%
knitr::include_graphics("img/resultado-imprimir.png")
```

### Solo guardar

```{r}
#| echo: false
#| fig-align: center
#| out-width: 100%
knitr::include_graphics("img/resultado-guardar.png")
```

### Guardar e imprimir

```{r}
#| echo: false
#| fig-align: center
#| out-width: 100%
knitr::include_graphics("img/resultado-imp-guardar.png")
```

:::


# Datos en R

## Conjunto de datos en R
<hr>

- En investigación, las bases de datos se organizan en `tablas rectangulares` estructuradas.

    + Cada fila es una `observación`
    + Cada columna es una `variable`

- Hay dos clases de objetos que comúnmente usamos para almacenar y manipular datos en R: 
    + `data.frame`
    + `data.tibble`

![<FONT size='4'>*Adaptado de Smit Aj, Abrahams A & Schlegel RW. Intro R Workshop: Data Manipulation, Analysius, and Visualization.*</FONT>](img/table-datos.png)


## data.tibble versus data.frame
<hr>

>[Los `data.tibble` también son `data.frame`, pero con algunos `poderes adicionales`.]{.r-fit-text}

::: columns
::: {.column width='50%'}

<center><h3>[Así se ve un data tibble]{.verde-h3}</h3></center>

```{r}
#| echo: false
library(medicaldata)
data(covid_testing)
covid_testing <- covid_testing %>% as_tibble() %>% select(1:5)
```

```{r}
covid_testing
```

- Notar que los `data.tibble` son `data.frame aumentados`:

```{r}
class(covid_testing)
```

:::

::: {.column width='50%'}

<center><h3>[Y así un data frame]{.verde-h3}</h3></center>

```{r}
#| echo: false
covid_testing <- as.data.frame(covid_testing)
```

```{r}
covid_testing
```

- Los `data.frame` son solo eso, `data.frame`:

```{r}
class(covid_testing)
```

:::

:::

## ¿De qué están hechos los data.frame y data.tibble?
<hr>

- Sus unidades básicas son los `vectores`.

>Los `vectores` son `colecciones de datos` de un `solo tipo`:


```{r}
#| echo: false
tipo_vector <- data.frame(
  tipo = c("Entero", "Doble", "Caracter", "Lógicos", "Factor"), 
  tipo_ingles = c("Integer", "Double", "Character", "Logical", "Factor"), 
  desc = c("Solo números enteros", "Números", "Texto o cadenas ('strings')", "Verdadero o Falso", "Categorías"), 
  ejem = c("c(1, 2, 3, 4)", "c(1, 2.4, 3.14, 4)", "c('1', 'azul', 'divertido', 'monstruo')", "c(TRUE, FALSE, TRUE, FALSE)", "c('Muy intenso', 'Leve', 'Moderado', 'Leve')")
)
```

```{r}
#| echo: false
#| output: asis
tipo_vector %>% 
  pandoc.table(caption = "", 
               justify = "lcll", 
               missing = "—", 
               split.tables = Inf, 
               col.names = c("Tipo de dato", 
                             "(En inglés)", 
                             "Descripción", 
                             "Ejemplo"))
```


## Vectores como átomos de R
<hr>


::: columns

::: {.column width='40%'}
- Vectores se limitan a `un solo tipo de dato`.

- Conforman `diversas estructuras`: matrices, arreglos, listas, etc.

- Usaremos principalmente data frames y data tibbles.

- Los data frames y tibbles:
    
    + Son columnas de vectores.
    
    + Cada vector puede ser de distinto tipo.
    
:::

::: {.column width='60%'}

- Los data frames y tibbles:

    + Almacenan más de un tipo de dato: *integer*, *double*, *character*, *logic*, *factor*, *etc*.

```{r}
#| echo: false
#| fig-align: center
#| out-width: 100%
knitr::include_graphics("img/estructuras-r.png")
```

:::
:::

## Vectores y data frame / data  tibble en R

```{r}
#| echo: false
#| fig-align: center
#| out-width: 100%
knitr::include_graphics("img/vector-dataframe.png")
```

## ¿Cómo podemos ver qué hay en los conjuntos de datos?
<hr>

Podemos `hechar un vistazo` ([glimpse]{.verde-h3} en inglés) a los datos:


```{r}
#| echo: false
library(medicaldata)
data(covid_testing)
```

```{r}
glimpse(covid_testing)
```

## ¿Cómo obtener más información?
<hr>

::: panel-tabset
## Diccionario

- Como los datos provienen de un paquete en R, se puede usar la función de ayuda [?]{.verde-h3}

```{r}
#| echo: true
#| eval: false
?covid_testing
```

![](img/help_covid_testing.png){fig-align="center"}

## Dimensiones

- Número de filas: 

```{r}
nrow(covid_testing)
```

- Número de columnas: 

```{r}
ncol(covid_testing)
```

- Número de filas y columnas: 

```{r}
dim(covid_testing)
```

:::


## `r fontawesome::fa("mug-saucer", "white")` Hagamos una última pausa {background-color="#00817E"}
<hr>

::: r-fit-text

<center>

Tomemos un descanso de `5 minutos`...

Estire las piernas `r fontawesome::fa("person-walking", "white")`... 

Deje de ver las pantallas `r fontawesome::fa("laptop", "white")`...

... cualquier `r fontawesome::fa("laptop", "white")`, las del celular `r fontawesome::fa("mobile", "white")` también.

</center>

:::

```{r}
#| echo: false
library(countdown)
countdown_timer <- function(
    minutes = 1, 
    play_sound = TRUE, 
    font_size = "2em", 
    ...
) {
  countdown(
    minutes = minutes,
    # Fanfare when it's over
    play_sound = play_sound,
    # Set timer theme to match solarized colors
    color_border              = "#404041",
    color_text                = "white",
    color_background = "#000000",
    color_running_background  = "#72994E",
    color_running_text        = "white",
    color_finished_background = "#EE6331",
    color_finished_text       = "white",
    font_size = font_size,
    ...
  )
}
```

```{r}
#| echo: false
countdown_timer(5)
```

## `r fontawesome::fa("laptop-code", "white")` Nuestro turno {background-color="#000000"}
<hr>

- Descargue la carpeta denominada `taller01`. 

- Descomprímala y abra el projecto denominado `taller01.Rproj`. 

- Con el proyecto abierto, abra el archivo quarto denomnado `taller01.qmd`.

- Resuelva el taller según las indicaciones.

- Al finalizar, renderice el documento. Observe el documento `.html` generado.

\

```{r}
#| echo: false
library(countdown)
countdown_timer <- function(
    minutes = 1, 
    play_sound = TRUE, 
    font_size = "2em", 
    ...
) {
  countdown(
    minutes = minutes,
    # Fanfare when it's over
    play_sound = play_sound,
    # Set timer theme to match solarized colors
    color_border              = "#404041",
    color_text                = "white",
    color_background = "#000000",
    color_running_background  = "#72994E",
    color_running_text        = "white",
    color_finished_background = "#EE6331",
    color_finished_text       = "white",
    font_size = font_size,
    ...
  )
}
```

```{r}
#| echo: false
countdown_timer(30)
```

## 

::: r-fit-text
<center>¡Gracias!</center>

<center>¿Preguntas?</center>

:::

## 

\

\

\

::: r-fit-text

<center>
{{< fa brands twitter >}} @psotob91 

{{< fa brands github >}} https://github.com/psotob91

{{< fa inbox >}} percys1991@gmail.com
</center>

:::
